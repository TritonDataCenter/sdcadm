#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# Make a shar for installing/upgrading sdcadm.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


TOP=$(cd $(dirname $0)/../ >/dev/null; pwd)
PROTO=$TOP/build/shar-image

NAME=sdcadm
VERSION=$(json -f $TOP/package.json version)
STAMP=$VERSION-$(date -u "+%Y%m%dT%H%M%SZ")


#---- support stuff

function fatal
{
    echo "$0: fatal error: $*" >&2
    exit 1
}

function errexit
{
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}



#---- mainline

# Process arguments.
while getopts "o:s:" c; do
    case "$c" in
    o)
        OUTDIR=$OPTARG
        ;;
    s)
        STAMP=$OPTARG
        ;;
    *)
        usage "illegal option -- $OPTARG"
        exit 1
        ;;
    esac
done
[[ -n "$OUTDIR" ]] || OUTDIR=$TOP/build
mkdir -p $OUTDIR
OUTSHAR=$OUTDIR/$NAME-$STAMP.sh
OUTMANIFEST=$OUTDIR/$NAME-$STAMP.imgmanifest

shift $((OPTIND - 1))

trap 'errexit $?' EXIT

rm -rf $PROTO
mkdir -p $PROTO
cp -PR \
    $TOP/bin \
    $TOP/lib \
    $TOP/etc \
    $TOP/smf \
    $TOP/node_modules \
    $TOP/tools/install-sdcadm.sh \
    $TOP/package.json \
    $PROTO
cp -PR \
    $TOP/build/node \
    $PROTO/node
mkdir -p $PROTO/tools
cp -P $TOP/tools/rotate-logs.sh $PROTO/tools/

# Trim out cruft for smaller package.
rm -rf $PROTO/node/bin/npm
rm -rf $PROTO/node/lib/node_modules/npm
rm -rf $PROTO/node/share
# TODO: more to trim here:
#   find . -name test | xargs du -sk | awk '{print $1}' |  paste -sd+ | bc  # 1056

# Add a stamp file to know exactly what build we have.
mkdir -p $PROTO/etc
echo "$STAMP" >$PROTO/etc/buildstamp

TMP=/var/tmp/$NAME

(cat <<__EOF__
#!/bin/bash
#
# This shar will install/upgrade "sdcadm" on a SmartDataCenter headnode GZ.
#
function fatal {
    echo "\$0: error: \$*" >&2
    exit 3
}
[[ "\$(zonename)" == "global" ]] || fatal "not running in global zone"
[[ "\$(sysinfo | json "Boot Parameters.headnode")" == "true" ]] \
    || fatal "not running on the headnode"

echo "Extracting sdcadm $STAMP to $TMP."

if [ \`pwd\` != '$TMP' ]; then
    rm -rf $TMP
    mkdir -p $TMP
    cd $TMP
fi

#
# The GZ where we will be unsharing does not have md5sum that the shar
# uses to verify contents.
#
mkdir -p $TMP/.temp_bin
export PATH=$TMP/.temp_bin:\$PATH
cat > $TMP/.temp_bin/md5sum << 'EOFTOOL'
__EOF__
)> $OUTSHAR

cat ./tools/md5sum-for-smartos-gz >>$OUTSHAR
(cat <<__EOF2__
EOFTOOL

chmod +x $TMP/.temp_bin/md5sum

__EOF2__
)>>$OUTSHAR


(cd $PROTO && shar -Q $(ls) | grep -v '^exit'; cat <<EOF

if [[ -n "\$TRACE" ]]; then
    export PS4="[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }"
    set -o xtrace
fi
set -o errexit
set -o pipefail

echo "Installing sdcadm $STAMP."
bash ./install-sdcadm.sh

cd /var/tmp
rm -rf $TMP

echo "Installed sdcadm successfully."
exit 0
EOF
)>> $OUTSHAR

echo created $OUTSHAR

cat <<EOM >$OUTMANIFEST
{
    "v": 2,
    "uuid": "$(uuid)",
    "owner": "00000000-0000-0000-0000-000000000000",
    "name": "sdcadm",
    "version": "$VERSION",
    "description": "Administer SmartDataCenter standups",
    "disabled": false,
    "public": false,
    "type": "other",
    "os": "other",
    "tags": {
        "smartdc_service": "true",
        "buildstamp": "$STAMP"
    }
}
EOM
echo created $OUTMANIFEST

