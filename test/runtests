#!/usr/bin/env bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019, Joyent, Inc.
#

#
# Run `sdcadm` integration tests.
# This is expected to be run from GZ.
#
# This creates .tap files in OUTPUT_DIR that can be processed by a TAP reader.
# Testing config and log files are also placed in this dir.
#
# Run `./runtests -h` for usage info.
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

#---- guard

guard_file=/lib/sdc/.sdc-test-no-production-data
if [[ ! -f "$guard_file" ]]; then
    cat <<EOF
To run this test you must create the file:

    $guard_file

after ensuring you have no production data on this SDC.
EOF
    exit 2
fi



#---- support functions

function fatal
{
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function usage
{
    echo "Usage:"
    echo "  runtests [OPTIONS...]"
    echo ""
    echo "Options:"
    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
    echo "  -s          Stop on first error."
}



#---- mainline

start_time=$(date +%s)

TOP=$(cd $(dirname $0)/../; pwd)
NODE_INSTALL=$TOP/node
OUTPUT_DIR=/var/tmp/sdcadmtest
TAPE=$TOP/node_modules/.bin/tape


# Options.
opt_test_pattern=
opt_stop_on_failure=
while getopts "hf:s" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        f)
            opt_test_pattern=$OPTARG
            ;;
        s)
            opt_stop_on_failure="true"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done


if [[ "${TOP}" == '/opt/smartdc/sdcadm' ]]; then
  echo "# Copying test files to ${OUTPUT_DIR}"
  rm -rf $OUTPUT_DIR
  mkdir -p $OUTPUT_DIR
  cp -PR \
      $TOP/test \
      $TOP/node_modules \
      $TOP/node \
      $TOP/lib \
      $TOP/etc \
      $TOP/package.json \
      $OUTPUT_DIR
  sh $OUTPUT_DIR/test/runtests "${@}"
  exit $?
fi

RESULTS=$OUTPUT_DIR/results
# Setup a clean output dir.
echo "# Setup a clean output dir ($RESULTS)."
rm -rf $RESULTS
mkdir -p /$RESULTS
FAILING_LIST=$RESULTS/failing-tests.txt
touch $FAILING_LIST

cd $TOP

# Run the integration tests
echo ""
test_files=$(ls -1 test/*.test.js)
if [[ -n "$opt_test_pattern" ]]; then
    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
    echo "# Running filtered set of test files: $test_files"
fi

set +o errexit

for file in $test_files; do
    test_file=$(basename $file)
    echo "# $test_file"
    PATH=$NODE_INSTALL/bin:$PATH $TAPE $file \
        | tee $RESULTS/$test_file.tap
    retval=$?
    if [[ "${retval}" != "0" ]]; then
        echo $file >> $FAILING_LIST
        [[ -n "$opt_stop_on_failure" ]] && break
    fi
done

set -o errexit


# Summarize results
echo ""
echo "# Test output in $RESULTS:"
ls -1 $RESULTS/*.tap | sed -e 's,^,#    ,'

num_failing_test_files=$(cat ${FAILING_LIST} | wc -l)
if [[ ${num_failing_test_files} -gt 0 ]]; then
    echo ""
    echo "# Failing test files:"
    cat $FAILING_LIST | sed -e 's,^,#    ,'
    exit 1
else
    exit 0
fi
